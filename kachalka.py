from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
import datetime
import os
TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º
tasks = [
    "–î–µ–≤–æ—á–∫–∏, —Å–µ–≥–æ–¥–Ω—è –∫–∞—á–∞–µ–º –∂–æ–ø—É. –ò —á—Ç–æ–± –∫–∞–∂–¥–∞—è –ø–æ –∫—Ä—É–∂–∫—É —Å–æ–æ–±—Ä–∞–∑–∏–ª–∞. –ë–´–†–ê",
    "–ü—Ä–µ—Å—Å—É—Ö–∞ –¥–ª—è –±—Ä–∞—Ç—É—Ö–∏. –ù–æ–∂–Ω–∏—Ü—ã –¥–ª—è –Ω–µ–∂–Ω—ã—Ö –¥–∞–º",
    "–¢–µ–ª—å—Ü–µ –±–æ–ª—å–Ω–æ–µ —Å–≤–æ–µ –∫–∞—á–Ω—É–ª–∏... –ø–æ—Ä–∞ –∏ –∑–∞ –º–æ–∑–≥–æ–≤—É—é –º—ã—à—Ü—É –±—Ä–∞—Ü—Ü–∞"
]

user_status = {}  
day_index = 0     

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_daily_message(context: ContextTypes.DEFAULT_TYPE):
    global day_index
    message = tasks[day_index % len(tasks)]
    for chat_id, active in user_status.items():
        if active:
            await context.bot.send_message(chat_id=chat_id, text=message)
    day_index += 1

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_status[chat_id] = True  
    keyboard = [
        [
            InlineKeyboardButton("—Ç—É—Ä–Ω –æ–Ω –Ω–∞—Ö", callback_data="on"),
            InlineKeyboardButton("–Ω—è.–ø–æ–∫–∞", callback_data="off")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –∫—Ç–æ –∑–¥–µ—Å—å –≤ –∫–∞—á–∞–ª–∫–µ —Å–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π? üí™ –ë–£–ú –û–ü–£–©–ï–ù. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å —à–æ –¥–µ–ª–∞—Ç—å.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    if query.data == "on":
        user_status[chat_id] = True
        await query.edit_message_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
    elif query.data == "off":
        user_status[chat_id] = False
        await query.edit_message_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ 9:00 —É—Ç—Ä–∞
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_daily_message, "cron", hour=9, minute=0, args=[app])
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()  

if __name__ == "__main__":
    main()
